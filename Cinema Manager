import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Scanner;

public class CinemaManager {

    static private char [][] cinemaRoom;


    public static char[][] getCinemaRoom(){
        return cinemaRoom;
    }

    public void setCinemaRoom(char[][] cinema){
        this.cinemaRoom = cinemaRoom;
    }

    static boolean notPurchased = true;
    static int soldTickets = 0;

    public static void main(String[] args){
        int price;
        int currentIncome = 0;
        int totalIncome = 0;
        boolean running = true;

        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of rows:");
        int rows = scanner.nextInt();
        System.out.println("Enter the number of seats in each row:");
        int seatsInRow = scanner.nextInt();

        createCinemaRoom(rows, seatsInRow);
        emptyCinemaRoom(getCinemaRoom());

        while(running) {
            System.out.println();
            System.out.println("1. Show the seats");
            System.out.println("2. Buy a ticket");
            System.out.println("3. Statistics");
            System.out.println("0. Exit");

            int action = scanner.nextInt();

            switch (action) {
                case 0:
                    running = false;
                    break;
                case 1:
                    System.out.println();
                    printCinemaRoom();
                    break;
                case 2:
                    notPurchased = true;
                    int row = 0;
                    while(notPurchased) {
                        System.out.println();
                        System.out.println("Enter a row number:");
                        row = scanner.nextInt();
                        System.out.println("Enter a seat number in that row:");
                        int seat = scanner.nextInt();
                        System.out.println();
                        if(checkOfTheInput(rows, seatsInRow, row, seat)) {
                            sellTicket(row, seat, cinemaRoom);
                        }
                    }
                        price = calculateTicketPrice(row, rows, seatsInRow);
                        currentIncome += price;
                        System.out.println("Ticket price: $" + price);
                    break;
                case 3:
                    System.out.println();
                    System.out.println("Number of purchased tickets: " + soldTickets);
                    double percentage = rows*seatsInRow;
                    BigDecimal per = new BigDecimal(soldTickets*100/percentage).setScale(2, RoundingMode.HALF_UP);
                    System.out.println("Percentage: " + per + "%");
                    System.out.println("Current income: $" + currentIncome);
                    System.out.println("Total income: $" + calculateTotalIncome(rows, seatsInRow));
                    break;
                default:
                    System.out.println();
                    System.out.println("There is no such action!");
            }
        }
    }

    public static void createCinemaRoom(int n, int m){
        cinemaRoom = new char[n+1][m+1];
        for(int i = 1; i < cinemaRoom[0].length; i++) {
            char number = (char)(i+48);
            cinemaRoom[0][i] = number;
        }
        for( int i = 1; i < cinemaRoom.length; i++) {
            char number = (char)(i+48);
            cinemaRoom[i][0] = number;
        }
        cinemaRoom[0][0] = ' ';
    }

    public static char[][] emptyCinemaRoom(char cinemaRoom [][]){
        for (int i = 1; i < cinemaRoom.length; i++) {
            for (int j = 1; j < cinemaRoom[0].length; j++) {
                cinemaRoom[i][j] = 'S';
            }
        }
        return cinemaRoom;
    }

    public static void printCinemaRoom() {
        System.out.println("Cinema:");
        for (int i = 0; i < cinemaRoom.length; i++) {
            for (int j = 0; j < cinemaRoom[0].length; j++) {
                System.out.print(cinemaRoom[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int calculateTotalIncome(int rows, int seatsInRow) {
        int income;
        if(rows * seatsInRow <= 60) {
            income = rows * seatsInRow * 10;
        } else {
            if (rows % 2 != 0) {
                income = (rows / 2 * seatsInRow* 10) + ((rows / 2 + 1) * seatsInRow * 8);
            } else {
                income = (rows * seatsInRow* 9);
            }
        }
        return income;
    }

    public static int calculateTicketPrice(int row, int rows, int seatsInRow) {
        int price;
        if(rows * seatsInRow <= 60) {
            price = 10;
        } else {
            if (row <= (rows / 2)) {
                price = 10;
            } else {
                price = 8;
            }
        }
        return price;
    }

    public static void sellTicket(int row, int seat, char cinemaRoom[][]) {
        if (cinemaRoom[row][seat] != 'B') {
            cinemaRoom[ row ][ seat ] = 'B';
            soldTickets++;
            notPurchased = false;
        } else {
            System.out.println("That ticket has already been purchased!");
        }
    }

    public static boolean checkOfTheInput(int rows, int seatsInRow, int row, int seat) {
        if(row > rows || seat > seatsInRow) {
            System.out.println("Wrong input!");
            return false;
        }
        return true;
    }

